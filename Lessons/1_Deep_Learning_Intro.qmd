---
title: "Deep Learning in R: Introduction"
author: "D-Lab"
format: html
editor: visual
---

## Libraries

We will be using the following libraries:

```{r, message = F, warning = F}
library(tensorflow)
library(keras)
library(tfdatasets)
library(tfhub)
library(tidyverse)
library(reticulate)
```

## What is Deep Learning?

In any kind of machine learning, we are interested in mapping inputs (pictures of Oski the Bear) to targets (the label "Oski the Bear"). The machine part means a computer operating an algorithm. The learning part means some type of automatic search process to transform data in such a way as to produce useful representations guided by a feedback signal.

It turns out that this idea of searching for useful representations of data (such as histograms of the pixels in a picture) within a specified set of possibilities and some rule for how good the representation is, solves a remarkably large set of tasks.

The "Deep" in deep learning means that the models we build are layered representations of data. Modern deep learning in production can have many layers, and all of these layers are learned automatically from training data. For example, the model GPT-3 has 96.

## How to Build a Neural Network

The representations of layers are learned by models called *neural networks*, where information goes through successive hierarchies to produce something (hopefully) useful at the end. We call what the layer does to input data its *weight* and each transformation implemented the *parameterization* of a layer.

A model learns by finding values for the weights of all layers in the network so that there will be a correct mapping from example inputs to associated targets. We evaluate the correctness with a loss function which determines the distance between our model predictions and the true values.

Error is computed as target value minus our estimation. The weights delta metric (how much the errors should change) is calculated as the error times the slope of the point on the activation function times the vector of input features.

The vector of original weights is added to the vector of updated weights and are "backpropagated" (used as the recycled input) and passed through the model for another epoch.

With deep networks, the process also takes places between **hidden layers**, or areas of *nonlinear* transformations connected only to the layers before and after them. They are referred to as "hidden" because they are not show as the final output.

## Our First Model: Handwriting Digits

The problem we will try to solve is to classify grayscale images of handwritten digits into their numeric categorizations. Each of these images is 28 x 28 pixels and is one of the first ten digits 0-9.

```{r}
library(tensorflow)
library(keras)
mnist = dataset_mnist()
```

The MNIST dataset is in some sense the "Hello World!" of Deep Learning, so we will use it to explain various properties. The dataset comes preloaded in Keras in four R arrays, which are organized into two lists named `train` and `test`.

```{r}
train_images <- mnist$train$x
train_labels <- mnist$train$y

test_images <- mnist$test$x
test_labels <- mnist$test$y

str(train_images)
str(train_labels)
```

To solve our problem, we will make a neural network with keras. Then, we'll feed the neural network our training data and produce predictions for test images and see how accurate our predictions match the test labels.

Let's set up the model architecture.

```{r}
first_model <- keras_model_sequential() |>
    layer_dense(units = 512, activation = "relu") |>
    layer_dense(units = 10, activation = "softmax")
```

What have we done here? We have set up a model with a linear stack of layers with `keras_model_sequential()`. We have two layers in this model, which are both *fully connected* or dense. The second layer sequentially will return an array of 10 probability scores where each will be the probability that the current digit image is one of the 10 digit classes.

Now that we have a model, we compile it and pick three things:

1.  How to optimize the model with `optimizer` (here the default is `rmsprop`)
2.  How to evaluate how good our prediction are with a `loss` function
3.  What metrics we should care about with `metrics`

```{r}
## We don't save this to a variable because it works in place
compile(first_model,
        optimizer = "rmsprop",
        loss = "sparse_categorical_crossentropy",
        metrics = "accuracy")
```

Now that we have a compiled model, we need to make sure that our data is appropriate for the model. This is a *preprocessing* step. To prepare our image data, we will transform them into the shape that our model expects and scale the data so all values are between 0 and 1 instead of a pixel value between 0 and 255. This can help the neural network optimize its weights by removing the scale factor of the pixel intensities.

The `array_reshape` function allows us to reshape a three-dimensional array like those found in our `mnist` dataset into matrices.

```{r}
train_images <- array_reshape(train_images, c(60000, 28 * 28))
train_images <- train_images / 255 

test_images <- array_reshape(test_images, c(10000, 28 * 28))
test_images <- test_images /255 
```

Now, we fit our model to the training data. We take our model architecture, the training data, and provide the number of iterations through the training data (`epoch`) and the batch size (128 observations here).

```{r}
fit(first_model,
    train_images, 
    train_labels, 
    epochs = 5,
    # What size should the model break up the data into?
    batch_size = 128)
```

Very quickly we see that our model's accuracy gets very close to perfect. This has to do with the nature of this problem. Other deep learning problems may take much longer to train, and produce far less accuracy. We can now use our model to predict the probabilities of new digits from our test set.

```{r}
test_digits = test_images[1:10,]
predictions = predict(first_model, test_digits)
round(predictions[1,] , 5)
```

Our model's highest probability score is that this image is a "7" (it's in the 8th place because the first possible digit is 0). What does our test data say?

```{r}
test_labels[1]
```

Our model is correct! How good is it on the entire dataset? To find out, we use `evaluate` to compute our metrics over the entire test dataset.

```{r}
metrics <- evaluate(first_model, test_images, test_labels)
metrics["accuracy"]
```

It happens to be the case here that our accuracy on the test dataset is a bit lower than our accuracy on the training set, which is a sign of overfitting.

## TensorFlow

TensorFlow is an end-to-end open source machine learning platform, which focuses on simplicity and ease of use. Keras is a deep learning API built on top of TensorFlow. At its heart, TensorFlow is based on the concept of *tensors.*

A tensor is defined by:

-   the number of axes. A rank 2 tensor is a matrix.

-   The number of dimensions, also known as its shape.

-   What kind of data is in the tensor.

Let's look at the data we have loaded for the images dataset for examples.

```{r}
# Number of axes 
length(dim(mnist$train$x))

# Shape 
dim(mnist$train$x)

# Datatype 
typeof(mnist$train$x)

# Here's what that image representation looks like for the second training example
plot(as.raster(abs(255 - mnist$train$x[2, , ]), max = 255))
```

Tensors are immutable. We create them by putting in an initial value.

```{r}
exampleTensor <- tf$Variable(initial_value = tf$random$normal(shape(3, 1)))
exampleTensor

# If we want to change our tensor we have to explicitly assign values
exampleTensor2 <- tf$Variable(initial_value = tf$random$normal(shape(3,1)))
exampleTensor2 <- exampleTensor2$assign(tf$ones(shape(3,1)))
exampleTensor2
```

TensorFlow offers a large number of mathematical operations. Here's some examples.

```{r}
a = tf$ones(c(2L,2L))
b = tf$square(a)
c = a + b
d = tf$sqrt(c)
e = tf$matmul(a,b)
f = e * d
```

## Challenge

We have used two representation layers before the final classification layer. Try the following experiments:

-   Building a model with one representation layer. What is the effect on the validation and test accuracy?

-   Build a model with three representation layers. What is the effect on the validation and test accuracy?

-   What happens if we double the number of units?

-   What happens if we halve the number of units?

-   What happens if we use a different loss function? Try using `mse` instead of `binary_crossentropy`.

## Universal Workflow for Machine Learning

For every Deep Learning or Machine Learning project, there is a universal workflow. This is high level, but useful when considering whether a Deep learning solution can be useful for your project.

1.  First, define the problem. What is your end goal? Can you get a dataset that is annotated with appropriate labels for supervised learning tasks?
2.  Second, prepare your data. Use feature normalization to make sure that your data is appropriate for a deep learning algorithm.
3.  Third, pick your evaluation protocol. If you have small data, K-fold validation is a useful protocol. If you have large data, leave aside about 20% of the training data for validation as a rule of thumb.
4.  Fourth, start by achieving statistical power by setting an appropriate baseline (e.g. random guessing). If your model cannot beat a random guess, than deep learning might not be the right paradigm for the problem.
5.  Fifth, develop a model that can overfit. With appropriate minimal tuning such as dropout and feature engineering, overfitting indicates that your model can learn. It is much easier to break off learning from an appropriately scaled model than the reverse.

## Sequential and Functional Keras APIs

In this section, we will walk through how to build a deep learning model with Keras. So far we have used the "sequential" API, which is easy to use but is also limited. It's rather convenient to quickly spin up and train a model using the sequential API, which we can do in a single pipe:

```{r}
model <- keras_model_sequential() |>
  layer_dense(units = 512, activation = "relu") |>
  layer_dense(units = 256, activation = "relu") |>
  layer_dense(units = 10, activation = "softmax") |>
  compile(optimizer = "rmsprop",
          loss = "sparse_categorical_crossentropy",
          metrics = "accuracy")

model |> fit(
  train_images, 
  train_labels, 
  epochs = 5,
  # What size should the model break up the data into?
  batch_size = 128)
```

```{r}
model |> evaluate(test_images, test_labels)
```

In practice, we build models with Keras using the Functional API. The creator, Francois Chollet describes this API as like playing with LEGO bricks.

First, let's convert our previous model into the Functional API.

```{r}
# Naming layers isn't required, but is an option 
# Declare a layer input that holds info about shape and 
# datatype of the data model will use. Here the model will process batches where each sample has a shape of size 3
simple_inputs <- layer_input(shape = c(3), name = "first_input")

# Create a layer and compose with the inputs
features <- simple_inputs |>
  layer_dense(64, activation = "relu")

# Obtain final outputs by chaining together an additional layer
outputs <- features |>
  layer_dense(10, activation = "softmax")

# Instantiate the model by specifying the inputs and outputs with keras_model()
simple_model <- keras_model(inputs = simple_inputs, outputs = outputs)
```

Most models have multiple inputs and multiple outputs. For example, we might want to process different types of information and output different results for each. Consider a research queue on text data with the following structure: the title of an article, the abstract text, and some tagged information about the article added by a research assistant. The first two inputs are text input, and the latter is a categorical input.

Suppose we want our model to determine how close an article is to our research project, and which research assistant we should send it to for additional processing. We can build a model like this in a few lines of code with Keras.

```{r}
# The following is made up data to demonstrate the model 
# The total number of words that our model knows about
words <- 10000
num_tags <- 100
gsrs <- 3 

title <- layer_input(shape = c(words))
text <- layer_input(shape = c(words))
tags <- layer_input(shape = c(num_tags))

## Combine features via concatenation 
model_features <- layer_concatenate(list(title, text, tags)) |>
  layer_dense(64, activation = "relu")

closeness <- model_features |>
  layer_dense(1, activation = "sigmoid")

which_gsr <- model_features |>
  layer_dense(gsrs, activation = "softmax")

queue_model <- keras_model(
  inputs = list(title, text, tags),
  outputs = list(closeness, which_gsr)
)
```

Training a model works in a similar way to the Sequential API. We call `fit()` and pass the input and output data.

```{r}
samples <- 1280 

## Helper function to create a random vectorized array 
random_vectorized_array <- function(dim) {
  array(sample(0:1, prod(dim), replace = TRUE), dim)
}

## Create fake input and output data 
title_data <- random_vectorized_array(c(samples, words))
text_data <- random_vectorized_array(c(samples, words))
tags_data <- random_vectorized_array(c(samples, num_tags))

closeness_data <- random_vectorized_array(c(samples,1))
ra_data <- random_vectorized_array(c(samples, gsrs))

## Compile and fit the model 
queue_model |>
  compile(
    optimizer = "rmsprop",
    ## Examples of having multiple loss and accuracy functions
    loss = c("mse", "categorical_crossentropy"),
    metrics = c("mse", "accuracy")
  )

queue_model %>%
  fit(
    x = list(title_data, text_data, tags_data), 
    y = list(closeness_data, ra_data), 
    epochs = 1
  )

## Evaluate the model metrics 
queue_model |>
  evaluate(x = list(title_data, text_data, tags_data),
           y = list(closeness_data, ra_data))
```
